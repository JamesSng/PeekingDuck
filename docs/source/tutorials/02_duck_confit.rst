***********
Duck Confit
***********

.. include:: /include/substitution.rst

This tutorial presents intermediate recipes for cooking up new PeekingDuck
pipelines by modifying the nodes and their configs.


.. _tutorial_configure_nodes:

More Object Detection
=====================

This section will demonstrate how to change the settings of PeekingDuck's nodes 
to vary their functionalities.

First, create a PeekingDuck project as shown below:

.. admonition:: Terminal Session

    | \ :blue:`[~user]` \ > \ :green:`mkdir object_detection` \
    | \ :blue:`[~user]` \ > \ :green:`cd object_detection` \
    | \ :blue:`[~user/object_detection]` \ > \ :green:`peekingduck init` \

Then, download this demo `cat and computer 
<https://storage.googleapis.com/peekingduck/videos/cat_and_computer.mp4>`_ video and
save it into the newly created ``object_detection`` folder.

The folder should contain the following:

.. parsed-literal::

   \ :blue:`object_detection/` \ |Blank|
   ├── cat_and_computer.mp4
   ├── pipeline_config.yml
   └── \ :blue:`src/` \ |Blank|

To perform object detection on the ``cat_and_computer.mp4`` file, edit the
``pipeline_config.yml`` file as follows:

.. code-block:: yaml
   :linenos:

   nodes:
   - input.recorded:
       input_dir: cat_and_computer.mp4
   - model.yolo:
       detect_ids: ["cup", "cat", "laptop", "keyboard", "mouse"]
   - draw.bbox:
       show_labels: True
   - output.screen

Here is a step-by-step explanation of what has been done:

   | Line 2 ``input.recorded``: tells PeekingDuck to load the ``cat_and_computer.mp4``.
   | Line 4 ``model.yolo``: by default, the Yolo model detects ``person`` only.
   |        The ``cat_and_computer.mp4`` contains other classes of objects like cup, cat, laptop, etc. 
   |        So we have to change the model settings to detect the other object classes.
   | Line 6 ``draw.bbox``: reconfigure this node to display the detected object class label.

.. note::

   The Yolo model can detect 80 different :ref:`object classes
   <general-object-detection-ids>`.

Run the above with the command ``peekingduck run``. |br|
You should see a display of the ``cat_and_computer.mp4`` with the various objects being
highlighted by PeekingDuck in bounding boxes. |br|
The 30-second video will auto-close at the end, or you can press ``q`` to end early.


.. _tutorial_media_writer:

Record Video File with FPS
==========================

This section demonstrates how to record PeekingDuck's output into a video file.
In addition, we will modify the pipeline by adding new nodes to calculate the
frames per second (FPS) and to show the FPS.

Edit ``pipeline_config.yml`` as shown below:

.. code-block:: yaml
   :linenos:

   nodes:
   - input.recorded:
       input_dir: cat_and_computer.mp4
   - model.yolo:
       detect_ids: ["cup", "cat", "laptop", "keyboard", "mouse"]
   - draw.bbox:
       show_labels: True
   - dabble.fps                           # add new dabble node
   - draw.legend:                         # show fps
       show: ["fps"]
   - output.screen
   - output.media_writer:                 # add new output node
       output_dir: /folder/to/save/video  # this is a folder name

The additions are:

   | Line 8 ``dabble.fps``: adds new ``dabble`` node to the pipeline. This node calculates the FPS.
   | Line 9 ``draw.legend``: adds new ``draw`` node to display the FPS.
   | Line 12 ``output.media_writer``: adds new ``output`` node to save PeekingDuck's
            output to a local video file. It requires a local folder path. If the folder
            is not available, PeekingDuck will create the folder automatically. The
            filename is auto-generated by PeekingDuck based on the input source.

Run the above with the command ``peekingduck run``. |br|
You will see the same video being played, but now it has the FPS counter.
When the video ends, an ``mp4`` video file will be created and saved in the
specified folder.

.. note::

   You can view all the available nodes and their respective configurable
   settings in PeekingDuck's :ref:`API documentation <api_doc>`.


.. _tutorial_augment:

Augmenting Images
=================

PeekingDuck has a class of ``augment`` nodes that can be used to perform preprocessing
or postprocessing of images/videos.
Augment currently lets you modify the brightness and contrast.

The ``pipeline_config.yml`` below shows how to use the ``augment.brightness`` node
within the pipeline:

.. code-block:: yaml
   :linenos:

   nodes:
   - input.recorded:
       input_dir: "data/verification/wave.mp4"
   - model.yolo
   - augment.brightness:
       beta: 50         # ranges from -100 (darken) to +100 (brighten)
   - draw.bbox
   - output.screen

The following figure shows the difference between the original vs the brightened image:

   .. figure:: /assets/tutorials/augment_brightness.png
      :alt: augment.brightness screenshot - original vs brightened image

      Augment Brightness: Original vs Brightened Image

